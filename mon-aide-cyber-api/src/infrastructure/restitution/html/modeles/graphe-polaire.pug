- const valueMax = 5
- const size = 1200;
- const height = 1200
- const tailleRadar = 550

svg(viewbox=`-600 -600 ${size} ${height}` class="indicateur-polaire")
  - const polaireVersCartesien = (r, theta) => ({x: r * Math.cos(theta),y: r * Math.sin(theta)})
  - const calculeAngleAIndex = index => (index * 2 * Math.PI) / 6 - Math.PI / 2;
  -
    const pointsDuPolygone = new Array(6).fill(0).map((_, index) => {
      const valeur = values[index];
      const r = ((valeur || 0) / 5) * tailleRadar;
      const theta = calculeAngleAIndex(index);
      const theta2 = calculeAngleAIndex(index + 1);
      const point1 = polaireVersCartesien(r, theta);
      const point2 = polaireVersCartesien(r, theta2);
      return `M 0 0 L ${point1.x} ${point1.y} L ${point2.x} ${point2.y} Z`;
    });
  each chemin, i in pointsDuPolygone
    path(d=chemin fill-opacity="0.7" fill=colors[i] )
  each index in new Array(6).fill(0).map((_, index) => index)
    - const theta = calculeAngleAIndex(index);
    - const thetaSuivant = calculeAngleAIndex(index + 1);
    - const coordonnees = polaireVersCartesien(tailleRadar, theta)
    line(x1="0" y1="0" x2=coordonnees.x y2=coordonnees.y stroke="#ddd" stroke-width=3)
    each index2 in new Array(6).fill(0).map((_, index) => index)
      - const decalage = (tailleRadar / 5) * index2
      - const coordonneesActuelles = polaireVersCartesien(decalage, theta)
      - const coordonneesSuivantes = polaireVersCartesien(decalage,thetaSuivant)
      line(x1=coordonneesActuelles.x y1=coordonneesActuelles.y x2=coordonneesSuivantes.x y2=coordonneesSuivantes.y stroke="#ddd" stroke-width=3 )
  each index in new Array(6).fill(0).map((_, index) => index)
    if index !== 0
      - const r = (tailleRadar / 5) * index
      - const y = -r * Math.sin(Math.PI / 2)
      text(x="0" y=y text-anchor="middle" font-size="48" stroke="white" stroke-width="1.3" font-weight="bolder" dominant-baseline="middle") !{index}
